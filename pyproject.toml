[tool.poetry]
name = "ads-campaign-metric"
version = "0.1.0"
description = "Real-time streaming data pipeline for ads campaign metrics using Apache Flink, Kafka, and Iceberg"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Apache Kafka dependencies
kafka-python = "^2.0.2"
confluent-kafka = "^2.3.0"

# Apache Iceberg dependencies
pyiceberg = "^0.6.0"
pyarrow = "^14.0.0"

# Data processing and analytics
pandas = "^2.1.0"
numpy = "^1.24.0"
pydantic = "^2.5.0"

# HTTP and API
requests = "^2.31.0"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}

# Database and storage
sqlalchemy = "^2.0.0"
psycopg2-binary = "^2.9.0"

# Configuration and environment
python-dotenv = "^1.0.0"
pydantic-settings = "^2.1.0"

# Logging and monitoring
structlog = "^23.2.0"
prometheus-client = "^0.19.0"

# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.12.0"
pytest-cov = "^4.1.0"

# Development tools
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"

[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"
ipykernel = "^6.27.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"

[tool.poetry.scripts]
start-flink-job = "src.main:main"
start-kafka-producer = "src.kafka.producer:main"
start-kafka-consumer = "src.kafka.consumer:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 